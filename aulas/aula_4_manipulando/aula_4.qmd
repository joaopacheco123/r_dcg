---
title: "Aula 4 - Importando e manipulando dados"
author: "João Amaral"
format: html
editor: source
editor_options:
  chunk_output_type: console
---

## Trabalhando com dados

Agora que sabemos a sintaxe básica do R, assim como os tipos de dados existentes, podemos começar a realizar tarefas mais complexas.

Os nossos objetos de estudo a partir de agora serão majoritariamente do tipo `data.frame` e `tibble`. A `tibble` é uma evolução da `data.frame`, com algumas melhorias. Para o nosso curso, saiba apenas sobre a existência das duas estruturas.

Existe um fluxo para trabalhar com bancos de dados, mostrado na figura abaixo. 

![Retirada de R for Data Science, 2nd ed.](imagens/fig_1.png)

Nessa aula, veremos como importar, organizar e manipular dados. Para essas tarefas, utilizaremos os pacotes contidos no `tidyverse`, um conjunto de pacotes pensados para ciência de dados, com uma filosofia em comum de organização.

## Importando dados

O passo inicial para se trabalhar com dados é importá-los. Os dados podem vir de diversas fontes: bancos de dados SQL, arquvios \*.csv, arquvivos \*.xlsx, e até mesmo estruturas de dados oriundas de outros programas de análise estatística, como \*.sav (SPSS).

Abaixo estão alguns pacotes e suas respectivas funções para importar dados:

```{r}
#| eval: false

# Arquivos .csv separados por ","
readr::read_csv(file = "C://...")

# Arquivos .csv separados por ";"
readr::read_csv2(file = "C://...")

# Arquivos .xlsx (Excel)
readxl::read_xlsx(path = "C://...")

# Arquivos .sav (SPSS)
haven::read_sav(file = "C://...")

# Arquivos .rds
readr::read_rds(file = "C://...")
```

Existem diversas funções para realizar essas mesmas importações. Recomendo seguir as funções acima para nos mantermos dentro do universo tidy.

## Pipe

O operador pipe é uma forma de encadear várias operacões de forma concisa. Ele pega o que está à sua esquerda e passa para a função à sua direita. A partir do R 4.1.0, foi introduzida uma versão nativa do pipe (`|>`), que antes funcionava apenas pelo pacote `magrittr`, na forma (`%>%`). Para ativá-lo, basta ir nas opções globais do Rstudio, conforme figura abaixo.


![Ativando o pipe nativo](imagens/fig_2.png)

Para utilizar o pipe, basta pressionar Ctrl/Cmd + Shift + M, ou apenas digitá-lo manualmente. Tente executar as linhas de código a seguir:

```{r}
# Exemplo de uso do pipe

# Criando um vetor numérico
vetor <- c(1,2,3,4,5)

# Utilizando o pipe para calcular a média, a partir da função mean()
vetor |> mean()

# Sem o uso do pipe, a sintaxe seria da seguinte forma
mean(vetor)
```

Uma observação importante: o pipe sempre passará o objeto à sua esquerda como o **primeiro** argumento da função à direita. Para códigos mais simples, parece não haver muitos benefícios em seu uso, mas logo você entenderá o verdadeiro poder do operador.

## Dados organizados (Tidy)
> "Tidy datasets are all alike, but every messy dataset is messy in its own way".\
> \- Hadley Wickham

TODO: importar um banco de dados bagunçado com o pipe e fazer algo para organizá-lo, já explicando sobre os verbos do dplyr

Falar sobre a forma de organização ideal

## Salvando seu banco de dados alterado
